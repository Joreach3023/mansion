<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Minecraft Billionaire Mansion Builder</title>
    <style>
        body {
            margin: 0;
            overflow: hidden;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #222;
        }
        #canvas {
            width: 100vw;
            height: 100vh;
            display: block;
        }
        #controls {
            position: absolute;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            background-color: rgba(0, 0, 0, 0.7);
            padding: 15px;
            border-radius: 10px;
            display: flex;
            align-items: center;
            gap: 15px;
        }
        button {
            background-color: #4CAF50;
            border: none;
            color: white;
            padding: 10px 20px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 16px;
            margin: 4px 2px;
            cursor: pointer;
            border-radius: 5px;
            transition: background-color 0.3s;
        }
        button:hover {
            background-color: #45a049;
        }
        button:disabled {
            background-color: #cccccc;
            cursor: not-allowed;
        }
        #startBtn {
            background-color: #4CAF50;
        }
        #pauseBtn {
            background-color: #f44336;
        }
        .slider-container {
            display: flex;
            align-items: center;
            gap: 10px;
            color: white;
        }
        .slider {
            -webkit-appearance: none;
            width: 150px;
            height: 10px;
            border-radius: 5px;
            background: #d3d3d3;
            outline: none;
        }
        .slider::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background: #4CAF50;
            cursor: pointer;
        }
        .slider::-moz-range-thumb {
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background: #4CAF50;
            cursor: pointer;
        }
        #info {
            position: absolute;
            top: 20px;
            left: 20px;
            background-color: rgba(0, 0, 0, 0.7);
            color: white;
            padding: 10px;
            border-radius: 5px;
            font-size: 14px;
        }
    </style>
</head>
<body>
    <canvas id="canvas"></canvas>
    <div id="controls">
        <button id="startBtn">Start Building</button>
        <button id="pauseBtn" disabled>Pause</button>
        <div class="slider-container">
            <span>Speed:</span>
            <input type="range" min="1" max="10" value="5" class="slider" id="speedSlider">
            <span id="speedValue">5x</span>
        </div>
    </div>
    <div id="info">
        Blocks placed: <span id="blockCount">0</span><br>
        Time elapsed: <span id="timeElapsed">00:00</span>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/0.159.0/three.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/dat-gui/0.7.9/dat.gui.min.js"></script>
    <script>
        // Main variables
        let scene, camera, renderer, controls;
        let buildInterval;
        let isBuilding = false;
        let buildSpeed = 5;
        let blockCount = 0;
        let startTime = null;
        let elapsedTime = 0;
        let lastTimestamp = 0;

        // Materials and textures
        const textures = {};
        const materials = {};
        const blockTypes = [
            { name: 'stone', color: 0x888888 },
            { name: 'dirt', color: 0x8B4513 },
            { name: 'grass', color: 0x567d46 },
            { name: 'wood', color: 0x8B6914 },
            { name: 'glass', color: 0xADD8E6, transparent: true, opacity: 0.5 },
            { name: 'gold', color: 0xFFD700 },
            { name: 'marble', color: 0xFFFAFA },
            { name: 'water', color: 0x1E90FF, transparent: true, opacity: 0.7 },
            { name: 'quartz', color: 0xF0F8FF },
            { name: 'obsidian', color: 0x2F4F4F },
            { name: 'diamond', color: 0x00BFFF, emissive: 0x008080, emissiveIntensity: 0.3 },
            { name: 'redstone', color: 0xB22222, emissive: 0xB22222, emissiveIntensity: 0.3 }
        ];

        // Mansion blueprint
        const blueprint = {
            // Foundation and terrain
            terrain: { width: 50, depth: 50, height: 2 },
            foundation: { width: 30, depth: 30, height: 1 },
            
            // Main structure
            mainBuilding: { width: 20, depth: 20, height: 15 },
            towers: [
                { x: -10, z: -10, width: 6, depth: 6, height: 20 },
                { x: 10, z: -10, width: 6, depth: 6, height: 20 },
                { x: -10, z: 10, width: 6, depth: 6, height: 20 },
                { x: 10, z: 10, width: 6, depth: 6, height: 20 }
            ],
            
            // Special features
            pool: { x: 0, z: 20, width: 10, depth: 10, height: 2 },
            garden: { x: -15, z: 0, width: 10, depth: 15, height: 1 },
            helipad: { x: 15, z: 0, width: 8, depth: 8, height: 1 },
            
            // Interior elements
            rooms: 15,
            floors: 3,
            
            // Luxury features
            skylights: 5,
            balconies: 8,
            columns: 12
        };

        // Build phases
        const buildPhases = [
            { name: "Terrain", blocks: 100 },
            { name: "Foundation", blocks: 200 },
            { name: "Main Building Structure", blocks: 500 },
            { name: "Towers", blocks: 400 },
            { name: "Interior Walls", blocks: 300 },
            { name: "Roofing", blocks: 250 },
            { name: "Windows", blocks: 150 },
            { name: "Pool", blocks: 100 },
            { name: "Garden", blocks: 150 },
            { name: "Luxury Features", blocks: 300 },
            { name: "Detailing", blocks: 200 }
        ];
        
        let currentPhase = 0;
        let phaseBlockCount = 0;

        // Build queue
        const buildQueue = [];
        let nextQueueIndex = 0;

        // Initialize the scene
        function init() {
            // Create scene
            scene = new THREE.Scene();
            scene.background = new THREE.Color(0x87CEEB);
            
            // Create camera
            camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
            camera.position.set(50, 40, 50);
            camera.lookAt(0, 0, 0);
            
            // Create renderer
            renderer = new THREE.WebGLRenderer({ canvas: document.getElementById('canvas'), antialias: true });
            renderer.setSize(window.innerWidth, window.innerHeight);
            renderer.shadowMap.enabled = true;
            
            // Add lighting
            const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);
            scene.add(ambientLight);
            
            const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
            directionalLight.position.set(50, 100, 50);
            directionalLight.castShadow = true;
            directionalLight.shadow.mapSize.width = 2048;
            directionalLight.shadow.mapSize.height = 2048;
            scene.add(directionalLight);
            
            // Initialize materials
            initMaterials();
            
            // Add the ground plane
            createGround();
            
            // Create orbit controls
            controls = new THREE.OrbitControls(camera, renderer.domElement);
            controls.enableDamping = true;
            controls.dampingFactor = 0.05;
            
            // Generate the building plan
            generateBuildPlan();
            
            // Add event listeners
            const startBtn = document.getElementById('startBtn');
            const pauseBtn = document.getElementById('pauseBtn');
            const speedSlider = document.getElementById('speedSlider');
            const speedValue = document.getElementById('speedValue');
            
            startBtn.addEventListener('click', () => {
                startBuilding();
                startBtn.disabled = true;
                pauseBtn.disabled = false;
            });
            
            pauseBtn.addEventListener('click', () => {
                pauseBuilding();
                startBtn.disabled = false;
                pauseBtn.disabled = true;
                startBtn.textContent = 'Resume Building';
            });
            
            speedSlider.addEventListener('input', () => {
                buildSpeed = parseInt(speedSlider.value);
                speedValue.textContent = buildSpeed + 'x';
                if (isBuilding) {
                    clearInterval(buildInterval);
                    startBuildLoop();
                }
            });
            
            // Handle window resize
            window.addEventListener('resize', onWindowResize);
            
            // Start animation loop
            animate();
        }
        
        function initMaterials() {
            blockTypes.forEach(type => {
                const materialParams = { 
                    color: type.color,
                    flatShading: true
                };
                
                if (type.transparent) materialParams.transparent = true;
                if (type.opacity) materialParams.opacity = type.opacity;
                if (type.emissive) materialParams.emissive = new THREE.Color(type.emissive);
                if (type.emissiveIntensity) materialParams.emissiveIntensity = type.emissiveIntensity;
                
                materials[type.name] = new THREE.MeshStandardMaterial(materialParams);
            });
        }
        
        function createGround() {
            const groundGeometry = new THREE.PlaneGeometry(200, 200);
            const groundMaterial = new THREE.MeshStandardMaterial({ 
                color: 0x69AF5A,
                side: THREE.DoubleSide
            });
            const ground = new THREE.Mesh(groundGeometry, groundMaterial);
            ground.rotation.x = Math.PI / 2;
            ground.position.y = -0.5;
            ground.receiveShadow = true;
            scene.add(ground);
        }
        
        function generateBuildPlan() {
            // Generate terrain
            generateTerrain();
            
            // Generate foundation
            generateFoundation();
            
            // Generate main building
            generateMainBuilding();
            
            // Generate towers
            generateTowers();
            
            // Generate special features
            generateSpecialFeatures();
            
            // Shuffle the build queue to make it more natural
            for (let i = buildQueue.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [buildQueue[i], buildQueue[j]] = [buildQueue[j], buildQueue[i]];
            }
            
            // Sort by Y position so we build from bottom to top
            buildQueue.sort((a, b) => a.position.y - b.position.y);
        }
        
        function generateTerrain() {
            const { width, depth, height } = blueprint.terrain;
            const center = { x: 0, y: 0, z: 0 };
            
            for (let x = -width/2; x < width/2; x++) {
                for (let z = -depth/2; z < depth/2; z++) {
                    // Vary height slightly for natural look
                    const terrainHeight = Math.floor(Math.random() * 2);
                    
                    for (let y = -height; y < terrainHeight; y++) {
                        const blockType = y < -1 ? 'dirt' : 'grass';
                        queueBlock(x, y, z, blockType);
                    }
                }
            }
        }
        
        function generateFoundation() {
            const { width, depth, height } = blueprint.foundation;
            
            for (let x = -width/2; x < width/2; x++) {
                for (let z = -depth/2; z < depth/2; z++) {
                    for (let y = 0; y < height; y++) {
                        queueBlock(x, y, z, 'stone');
                    }
                }
            }
        }
        
        function generateMainBuilding() {
            const { width, depth, height } = blueprint.mainBuilding;
            
            // Main structure walls
            for (let x = -width/2; x < width/2; x++) {
                for (let z = -depth/2; z < depth/2; z++) {
                    for (let y = 1; y < height; y++) {
                        // Only create walls, leave interior empty
                        if (x === -width/2 || x === width/2-1 || z === -depth/2 || z === depth/2-1 || y % 4 === 0) {
                            const blockType = y % 4 === 0 ? 'quartz' : 'marble';
                            queueBlock(x, y, z, blockType);
                        }
                    }
                }
            }
            
            // Windows
            for (let y = 3; y < height; y += 4) {
                for (let x = -width/2 + 3; x < width/2 - 3; x += 4) {
                    queueBlock(x, y, -depth/2, 'glass');
                    queueBlock(x, y, depth/2-1, 'glass');
                    queueBlock(x+1, y, -depth/2, 'glass');
                    queueBlock(x+1, y, depth/2-1, 'glass');
                }
                
                for (let z = -depth/2 + 3; z < depth/2 - 3; z += 4) {
                    queueBlock(-width/2, y, z, 'glass');
                    queueBlock(width/2-1, y, z, 'glass');
                    queueBlock(-width/2, y, z+1, 'glass');
                    queueBlock(width/2-1, y, z+1, 'glass');
                }
            }
            
            // Roof
            for (let x = -width/2; x < width/2; x++) {
                for (let z = -depth/2; z < depth/2; z++) {
                    queueBlock(x, height, z, 'obsidian');
                }
            }
            
            // Interior floors
            for (let floor = 1; floor < blueprint.floors; floor++) {
                const y = floor * 4;
                for (let x = -width/2 + 1; x < width/2 - 1; x++) {
                    for (let z = -depth/2 + 1; z < depth/2 - 1; z++) {
                        queueBlock(x, y, z, 'quartz');
                    }
                }
            }
            
            // Interior walls and rooms
            for (let floor = 0; floor < blueprint.floors; floor++) {
                const baseY = floor * 4 + 1;
                
                // Main corridor
                for (let x = -width/2 + 1; x < width/2 - 1; x++) {
                    for (let y = baseY; y < baseY + 3; y++) {
                        if (x % 5 === 0) {
                            queueBlock(x, y, 0, 'marble');
                        }
                    }
                }
                
                for (let z = -depth/2 + 1; z < depth/2 - 1; z++) {
                    for (let y = baseY; y < baseY + 3; y++) {
                        if (z % 5 === 0) {
                            queueBlock(0, y, z, 'marble');
                        }
                    }
                }
            }
            
            // Luxury features
            for (let i = 0; i < 10; i++) {
                const x = Math.floor(Math.random() * (width - 2)) - width/2 + 1;
                const z = Math.floor(Math.random() * (depth - 2)) - depth/2 + 1;
                queueBlock(x, 1, z, 'gold');
            }
            
            // Skylights
            for (let i = 0; i < blueprint.skylights; i++) {
                const x = Math.floor(Math.random() * (width - 4)) - width/2 + 2;
                const z = Math.floor(Math.random() * (depth - 4)) - depth/2 + 2;
                queueBlock(x, height, z, 'glass');
                queueBlock(x+1, height, z, 'glass');
                queueBlock(x, height, z+1, 'glass');
                queueBlock(x+1, height, z+1, 'glass');
            }
        }
        
        function generateTowers() {
            blueprint.towers.forEach(tower => {
                const { x, z, width, depth, height } = tower;
                
                // Tower walls
                for (let tX = x - width/2; tX < x + width/2; tX++) {
                    for (let tZ = z - depth/2; tZ < z + depth/2; tZ++) {
                        for (let y = 1; y < height; y++) {
                            if (tX === x - width/2 || tX === x + width/2 - 1 || 
                                tZ === z - depth/2 || tZ === z + depth/2 - 1) {
                                queueBlock(tX, y, tZ, 'stone');
                            }
                        }
                    }
                }
                
                // Tower windows
                for (let y = 3; y < height; y += 3) {
                    queueBlock(x - width/2, y, z, 'glass');
                    queueBlock(x + width/2 - 1, y, z, 'glass');
                    queueBlock(x, y, z - depth/2, 'glass');
                    queueBlock(x, y, z + depth/2 - 1, 'glass');
                }
                
                // Tower roof
                for (let tX = x - width/2; tX < x + width/2; tX++) {
                    for (let tZ = z - depth/2; tZ < z + depth/2; tZ++) {
                        queueBlock(tX, height, tZ, 'obsidian');
                    }
                }
                
                // Tower spire
                for (let y = height; y < height + 5; y++) {
                    queueBlock(x, y, z, 'gold');
                }
                queueBlock(x, height + 5, z, 'diamond');
            });
        }
        
        function generateSpecialFeatures() {
            // Pool
            const pool = blueprint.pool;
            for (let x = pool.x - pool.width/2; x < pool.x + pool.width/2; x++) {
                for (let z = pool.z - pool.depth/2; z < pool.z + pool.depth/2; z++) {
                    queueBlock(x, 0, z, 'quartz');
                    if (x > pool.x - pool.width/2 + 1 && x < pool.x + pool.width/2 - 1 &&
                        z > pool.z - pool.depth/2 + 1 && z < pool.z + pool.depth/2 - 1) {
                        for (let y = 1; y < pool.height; y++) {
                            queueBlock(x, y, z, 'water');
                        }
                    } else {
                        for (let y = 1; y < pool.height + 1; y++) {
                            queueBlock(x, y, z, 'quartz');
                        }
                    }
                }
            }
            
            // Garden
            const garden = blueprint.garden;
            for (let x = garden.x - garden.width/2; x < garden.x + garden.width/2; x++) {
                for (let z = garden.z - garden.depth/2; z < garden.z + garden.depth/2; z++) {
                    if (Math.random() > 0.6) {
                        queueBlock(x, 1, z, 'grass');
                        if (Math.random() > 0.7) {
                            queueBlock(x, 2, z, 'grass');
                        }
                    }
                }
            }
            
            // Helipad
            const helipad = blueprint.helipad;
            for (let x = helipad.x - helipad.width/2; x < helipad.x + helipad.width/2; x++) {
                for (let z = helipad.z - helipad.depth/2; z < helipad.z + helipad.depth/2; z++) {
                    queueBlock(x, 1, z, 'obsidian');
                    
                    // Create H marking
                    if ((Math.abs(x - helipad.x) <= 1 && Math.abs(z - helipad.z) < 3) || 
                        (Math.abs(z - helipad.z) === 2 && Math.abs(x - helipad.x) < 2)) {
                        queueBlock(x, 2, z, 'redstone');
                    }
                }
            }
            
            // Columns
            for (let i = 0; i < blueprint.columns; i++) {
                const angle = (i / blueprint.columns) * Math.PI * 2;
                const radius = blueprint.foundation.width / 2 - 2;
                const x = Math.round(Math.cos(angle) * radius);
                const z = Math.round(Math.sin(angle) * radius);
                
                for (let y = 1; y < 10; y++) {
                    queueBlock(x, y, z, 'quartz');
                }
            }
            
            // Balconies
            for (let i = 0; i < blueprint.balconies; i++) {
                const floor = 1 + Math.floor(i / 4);
                const y = floor * 4;
                const side = i % 4;
                
                let x, z;
                if (side === 0) {
                    x = -blueprint.mainBuilding.width/2;
                    z = -5 + (i % 3) * 5;
                } else if (side === 1) {
                    x = blueprint.mainBuilding.width/2 - 1;
                    z = -5 + (i % 3) * 5;
                } else if (side === 2) {
                    x = -5 + (i % 3) * 5;
                    z = -blueprint.mainBuilding.depth/2;
                } else {
                    x = -5 + (i % 3) * 5;
                    z = blueprint.mainBuilding.depth/2 - 1;
                }
                
                // Balcony floor
                for (let bX = -2; bX <= 2; bX++) {
                    for (let bZ = -2; bZ <= 2; bZ++) {
                        const finalX = x + (side === 0 ? -1 - bX : side === 1 ? 1 + bX : bX);
                        const finalZ = z + (side === 2 ? -1 - bZ : side === 3 ? 1 + bZ : bZ);
                        queueBlock(finalX, y, finalZ, 'quartz');
                    }
                }
                
                // Balcony railing
                for (let offset = -2; offset <= 2; offset++) {
                    if (side === 0 || side === 1) {
                        const finalX = x + (side === 0 ? -3 : 3);
                        const finalZ = z + offset;
                        queueBlock(finalX, y + 1, finalZ, 'quartz');
                    } else {
                        const finalX = x + offset;
                        const finalZ = z + (side === 2 ? -3 : 3);
                        queueBlock(finalX, y + 1, finalZ, 'quartz');
                    }
                }
            }
        }
        
        function queueBlock(x, y, z, blockType) {
            buildQueue.push({
                position: { x, y, z },
                blockType
            });
        }
        
        function createBlock(x, y, z, blockType) {
            if (!materials[blockType]) blockType = 'stone';
            
            const geometry = new THREE.BoxGeometry(1, 1, 1);
            const material = materials[blockType];
            const block = new THREE.Mesh(geometry, material);
            
            block.position.set(x, y, z);
            block.castShadow = true;
            block.receiveShadow = true;
            
            scene.add(block);
            blockCount++;
            
            document.getElementById('blockCount').textContent = blockCount;
            
            return block;
        }
        
        function startBuilding() {
            if (!isBuilding) {
                isBuilding = true;
                startTime = startTime || Date.now();
                lastTimestamp = Date.now();
                startBuildLoop();
            }
        }
        
        function pauseBuilding() {
            isBuilding = false;
            clearInterval(buildInterval);
            elapsedTime += Date.now() - lastTimestamp;
        }
        
        function startBuildLoop() {
            buildInterval = setInterval(() => {
                buildNextBlocks();
            }, 50 / buildSpeed);
        }
        
        function buildNextBlocks() {
            // Build blocks based on speed
            const blocksPerTick = buildSpeed;
            
            for (let i = 0; i < blocksPerTick; i++) {
                if (nextQueueIndex < buildQueue.length) {
                    const block = buildQueue[nextQueueIndex];
                    createBlock(block.position.x, block.position.y, block.position.z, block.blockType);
                    nextQueueIndex++;
                    
                    // Update phase progress
                    phaseBlockCount++;
                    if (phaseBlockCount >= buildPhases[currentPhase].blocks) {
                        currentPhase = Math.min(currentPhase + 1, buildPhases.length - 1);
                        phaseBlockCount = 0;
                    }
                } else {
                    // Building complete
                    pauseBuilding();
                    document.getElementById('startBtn').disabled = true;
                    document.getElementById('pauseBtn').disabled = true;
                    break;
                }
            }
            
            updateTimeElapsed();
        }
        
        function updateTimeElapsed() {
            if (isBuilding) {
                const now = Date.now();
                const totalElapsed = elapsedTime + (now - lastTimestamp);
                const seconds = Math.floor(totalElapsed / 1000) % 60;
                const minutes = Math.floor(totalElapsed / 60000);
                
                document.getElementById('timeElapsed').textContent = 
                    `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
            }
        }
        
        function onWindowResize() {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        }
        
        function animate() {
            requestAnimationFrame(animate);
            controls.update();
            updateTimeElapsed();
            renderer.render(scene, camera);
        }
        
        // Initialize the application
        init();
    </script>
</body>
</html>
